-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParMocha where
import AbsMocha
import LexMocha
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'boolean' { PT _ (TS _ 19) }
  'do' { PT _ (TS _ 20) }
  'downto' { PT _ (TS _ 21) }
  'else' { PT _ (TS _ 22) }
  'false' { PT _ (TS _ 23) }
  'for' { PT _ (TS _ 24) }
  'if' { PT _ (TS _ 25) }
  'int' { PT _ (TS _ 26) }
  'return' { PT _ (TS _ 27) }
  'string' { PT _ (TS _ 28) }
  'to' { PT _ (TS _ 29) }
  'true' { PT _ (TS _ 30) }
  'void' { PT _ (TS _ 31) }
  'while' { PT _ (TS _ 32) }
  '{' { PT _ (TS _ 33) }
  '||' { PT _ (TS _ 34) }
  '}' { PT _ (TS _ 35) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListFunc { AbsMocha.Program $1 }
Func :: { Func }
Func : Type Ident '(' ListArg ')' Block { AbsMocha.FuncDef $1 $2 $4 $6 }
ListFunc :: { [Func] }
ListFunc : Func { (:[]) $1 } | Func ListFunc { (:) $1 $2 }
Arg :: { Arg }
Arg : Type Ident { AbsMocha.Arg $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsMocha.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { AbsMocha.Empty }
     | Block { AbsMocha.BStmt $1 }
     | Type ListItem ';' { AbsMocha.Decl $1 $2 }
     | Type Ident '(' ListArg ')' Block { AbsMocha.FuncDecl $1 $2 $4 $6 }
     | Ident '=' Expr ';' { AbsMocha.Ass $1 $3 }
     | 'return' Expr ';' { AbsMocha.Ret $2 }
     | 'return' ';' { AbsMocha.VRet }
     | 'if' '(' Expr ')' Stmt { AbsMocha.Cond $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsMocha.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsMocha.While $3 $5 }
     | 'for' Ident '=' Expr 'to' Expr 'do' Stmt { AbsMocha.ForTo $2 $4 $6 $8 }
     | 'for' Ident '=' Expr 'downto' Expr 'do' Stmt { AbsMocha.ForDownto $2 $4 $6 $8 }
     | Expr ';' { AbsMocha.SExp $1 }
Item :: { Item }
Item : Ident { AbsMocha.NoInit $1 }
     | Ident '=' Expr { AbsMocha.Init $1 $3 }
ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsMocha.Int }
     | 'string' { AbsMocha.Str }
     | 'boolean' { AbsMocha.Bool }
     | 'void' { AbsMocha.Void }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : Ident { AbsMocha.EVar $1 }
      | Integer { AbsMocha.ELitInt $1 }
      | 'true' { AbsMocha.ELitTrue }
      | 'false' { AbsMocha.ELitFalse }
      | Ident '(' ListExpr ')' { AbsMocha.EApp $1 $3 }
      | String { AbsMocha.EString $1 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr }
Expr5 : '-' Expr6 { AbsMocha.Neg $2 }
      | '!' Expr6 { AbsMocha.Not $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsMocha.EMul $1 $2 $3 } | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsMocha.EAdd $1 $2 $3 } | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsMocha.ERel $1 $2 $3 } | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { AbsMocha.EAnd $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 '||' Expr { AbsMocha.EOr $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsMocha.Plus } | '-' { AbsMocha.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsMocha.Times }
      | '/' { AbsMocha.Div }
      | '%' { AbsMocha.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsMocha.LTH }
      | '<=' { AbsMocha.LE }
      | '>' { AbsMocha.GTH }
      | '>=' { AbsMocha.GE }
      | '==' { AbsMocha.EQU }
      | '!=' { AbsMocha.NE }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

